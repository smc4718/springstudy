< 첨부형 게시판 실제 작업 순서 >

1. SQL작성

2. UploadDto 작성
@NoArgsConstructor
@AllArgsConstructor
@Data
@Builder      // 쉬운 생성을 도와주는 빌더패턴
public class UploadDto {
  private int uploadNo;
  private String title;
  private String contents;
  private String createdAt;
  private String modifiedAt;
  private UserDto userDto;    // private int userNo 를 대체함.
}


3. AttachDto 작성
@NoArgsConstructor
@AllArgsConstructor
@Data
@Builder      // 쉬운 생성을 도와주는 빌더패턴
public class AttachDto {
  private int attachNo;
  private String path;
  private String originalFilename;
  private String filesystemName;
  private int downloadCount;
  private int hasThumbnail;
  private int uploadNo;
}


4. mybatis-config.xml 별명 등록
<configuration>
    
  <!-- 설정 -->
  <settings>
    <setting name="mapUnderscoreToCamelCase" value="true"/>
  </settings>
  
  <typeAliases>
    <typeAlias alias="UserDto"         type="com.gdu.myhome.dto.UserDto"/>
    <typeAlias alias="LeaveUserDto"    type="com.gdu.myhome.dto.LeaveUserDto"/>
    <typeAlias alias="InactiveUserDto" type="com.gdu.myhome.dto.InactiveUserDto"/>
    <typeAlias alias="FreeDto"         type="com.gdu.myhome.dto.FreeDto"/>
    <typeAlias alias="BlogDto"         type="com.gdu.myhome.dto.BlogDto"/>
    <typeAlias alias="BlogImageDto"    type="com.gdu.myhome.dto.BlogImageDto"/>
    <typeAlias alias="CommentDto"      type="com.gdu.myhome.dto.CommentDto"/>
    <typeAlias alias="UploadDto"       type="com.gdu.myhome.dto.UploadDto"/>   <- 이거 추가.
    <typeAlias alias="AttachDto"       type="com.gdu.myhome.dto.AttachDto"/>
  </typeAliases>

</configuration>


5. mapper 폴더에 UploadMapper.xml 만들기
<mapper namespace="com.gdu.myhome.dao.UploadMapper">

</mapper>


6. 서비스 인터페이스 와 서비스임플 클래스(서비스인터페이스 추가) 만들기.
서비스임플에 @Service 붙이기.


7. UploadMapper 인터페이스로 만들기.
@RequiredArgsConstructor
@Service
public class UploadServiceImpl implements UploadService {

  private final UploadMapper uploadMapper;  // 매퍼 이용할 용도
  private final MyFileUtils myFileUtils;    // 파일첨부할 용도
  private final MyPageUtils myPageUtils;    // 목록 다룰 용도
  
}


8. UploadController 만들기.
@RequiredArgsConstructor
@Controller
public class UploadController {

  private final UploadService uploadService;  // 컨트롤러가 사용할 서비스
  
}


9. views 폴더에 upload 폴더 만들고 list.jsp 만들기.


10. Thumbnail 만드는 dependency 추가 (메이븐 사이트 : thumbnailator 검색후 첫 번째 항목)
<!-- 썸네일 자동 생성 -->
<!-- https://mvnrepository.com/artifact/net.coobird/thumbnailator -->
<dependency>
    <groupId>net.coobird</groupId>
    <artifactId>thumbnailator</artifactId>
    <version>0.4.20</version>
</dependency>



10. 13장(file)에 index.jsp 복사해서 15장에 upload 폴더에 write.jsp로 이름변경하여 붙여넣기



11.. write.jsp 작성
-----------------------------------------------------------
<jsp:include page="../layout/header.jsp">
  <jsp:param value="업로드게시글작성" name="title"/>
</jsp:include>

<div>

  <h1>Upload 게시글 작성하기</h1>
  
  <form method="post" action="${contextPath}/upload/add.do" enctype="multipart/form-data">
    <div>
      <label for="email">작성자</label>
      <input type="text" id="email" value="${sessionScope.user.email}" readonly> <!-- name이 없으면 서버로 보내지 않는다. upload 테이블에 사용자번호가 들어있지, 이메일 정보는 안들어있다. 다만 email은 화면에 표시만 해주는 용도이다. -->
    </div>
    <div>
      <label for="title">제목</label>
      <input type="text" name="title" id="title">
    </div>
    <div>
      <label for="contents">내용</label>
      <textarea rows="3" cols="50" name="contents" id="contents"></textarea>
    </div>
    <div>
      <label for="files">첨부</label>
      <input type="file" name="files" id="files" multiple> <!-- multiple 이 적혀있어야 다중첨부가 가능하다. -->
    </div>
    <div>
      <input type="hidden" name="userNo" value="${sessionScope.user.userNo}">
      <button type="submit">작성완료</button>
    </div>
  </form>
  
  <div id="file_list"></div>
  
</div>
  
<script>

  const fnFileCheck = () => {
    $('#files').change((ev) => {
      $('#file_list').empty();
      let maxSize = 1024 * 1024 * 100;
      let maxSizePerFile = 1024 * 1024 * 10;
      let totalSize = 0;
      let files = ev.target.files;
      for(let i = 0; i < files.length; i++){
        totalSize += files[i].size;
        if(files[i].size > maxSizePerFile){
          alert('각 첨부파일의 최대 크기는 10MB입니다.');
          $(ev.target).val('');
          $('#file_list').empty();
          return;
        }
        $('#file_list').append('<div>' + files[i].name + '</div>');
      }
      if(totalSize > maxSize){
        alert('전체 첨부파일의 최대 크기는 100MB입니다.');
        $(ev.target).val('');
        $('#file_list').empty();
        return;
      }
    })
  }
  
  fnFileCheck();
  
</script>
  
<%@ include file="../layout/footer.jsp" %>
----------------------------------------------


12. list.jsp 작성
-------------------------------------------------------
<jsp:include page="../layout/header.jsp">
  <jsp:param value="업로드게시판" name="title"/>
</jsp:include>

<div>

  <div>
    <a href="${contextPath}/upload/write.form">
      <button type="button" class="btn btn-primary">새글작성</button>
    </a>
  </div>
  
  <div id="upload_list"></div>
  
</div>

<%@ include file="../layout/footer.jsp" %>
---------------------------------------------------


13. 컨트롤러 추가 작성
@RequestMapping("/upload")  // /upload 로 시작하는 것들은 다 컨트롤러로 온다.
@RequiredArgsConstructor
@Controller
public class UploadController {

  private final UploadService uploadService;  // 컨트롤러가 사용할 서비스
  
  @GetMapping("/list.do")
  public String list() {
    return "upload/list";
  }
  
  @GetMapping("/write.form")
  public String write() {
    return "upload/write";
  }
}



14. layout 폴더에 header.jsp 에 추가 작성
<li><a href="${contextPath}/upload/list.do">첨부게시판</a></li>


15. servlet-context.xml 에 추가 작성
<mapping path="/upload/write.form"/>



